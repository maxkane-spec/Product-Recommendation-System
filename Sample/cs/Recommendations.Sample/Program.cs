// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**************************************************************************************************
 * Product Recommendations Sample
 * 
 * This sample shows how to use an API endpoint generated by the Recommendations Solution.
 * You can find more details on the Recommendations solution at https://aka.ms/recotemplate. 
 *
 * The sample demonstrates how to:
 * 
 * 1. Train a product recommendations predictive models based on 
 *    historical transaction data and information on the product catalog.
 * 
 * 2. Get Item-to-Item Recommendations from a trained model.
 * 
 * 3. Get Personalized Recommendations from a trained model.
 * 
 * 4. Set a model to be the default model, and request recommendations from the default model.
 * 
 * PRE-REQUIREMENTS:
 * 
 *  The steps below are explained in more detail at https://go.microsoft.com/fwlink/?linkid=847717
 * 
 *  1. Before you can run the application you need to deploy the Recommendations Template. 
 *     Deployment instructions are at https://go.microsoft.com/fwlink/?linkid=850658
 *
 *  2. You will get an API Key as part of the deployment process and the url of your solution. 
 *     Set the apiKey and recommendationsUri variable based on those values.
 *
 *  3. You will need to upload catalog and usage data for training to a blob storage container.
 *     It is important to note that you copy your usage and evaluation files to distinct FOLDERs, 
 *     while you provide the location of the catalog FILE.
 *     
 *     Based on that, you will need to set the following variables: 
 *     blobContainerName, catalogFileRelativeLocation,
 *     usageFolderRelativeLocation and evaluationUsageFolderRelativeLocation 
 *  
 ************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Threading;
using Recommendations.Client;
using Recommendations.Client.Entities;
using Microsoft.WindowsAzure.Storage;
using System.IO;
using System.Reflection;
using Microsoft.WindowsAzure.Storage.Blob;

namespace Recommendations.Sample
{
    class Program
    {
        static void Main()
        {
            // modify the lines below based on the values you received when the site was configured.
            // note that the connection string is only needed by the sample because it uploads some sample
            // data to create a recommendation model.
            string recommendationsEndPointUri = "https://yoursite.azurewebsites.net";
            string apiAdminKey = "your admin key goes here";
            string connectionString = @"DefaultEndpointsProtocol=https;AccountName=yoursite;AccountKey=theAccountKeyProvidedToYouAtConfigurationTime";

            // create recommendations client that allows us to work with the recommendations API
            var recommendationsClient = new RecommendationsAPI(new Uri(recommendationsEndPointUri));

            // add the api key header to all requests.
            // note that you can "train" recommendation models only with the modeling key,
            // you can score models with either the modeling key or the scoring key.
            recommendationsClient.HttpClient.DefaultRequestHeaders.Add("x-api-key", apiAdminKey);
            
            // comment out this line and use a pre-trained model Id if you would like to skip the training phase.
            Guid modelId = TrainModelUsingSampleData(recommendationsClient, connectionString);

            #region Scoring Example 1: Getting some recommendations for item with ID DHF-01159 

            string itemId = "DHF-01159";
            Console.WriteLine($"Getting recommendations for item '{itemId}' using model '{modelId}':");
            IList<RecommendationResult> results = recommendationsClient.Models.GetItemRecommendations(modelId, itemId);
            PrintRecommendationResults(results);
            
            #endregion

            #region Scoring Example 2: Getting some recommendations from the default model

            // First, ensure this model is the default model.
            Console.WriteLine($"\t Setting model '{modelId}' as the default model");
            recommendationsClient.Models.SetDefaultModel(modelId);

            // Now that it is the default model, we can request recommendations using the default model
            Console.WriteLine($"Getting recommendations for item '{itemId}' using the default model:");
            results = recommendationsClient.Models.GetItemRecommendationsFromDefaultModel(itemId);
            PrintRecommendationResults(results);

            #endregion

            #region Scoring Example 3: Getting personalized recommendations

            // assuming some user had done two recent transactions -- she purchased item DAF-00448
            // on February 1st 2017, and purchased item DHF-01333 the previous day.
            var events = new List<UsageEvent>
            {
                new UsageEvent
                {
                    ItemId = "DAF-00448",
                    EventType = EventType.Purchase,
                    Timestamp = new DateTime(2017, 2, 1)
                },
                new UsageEvent
                {
                    ItemId = "DHF-01333",
                    EventType = EventType.Purchase,
                    Timestamp = new DateTime(2017, 1, 31)
                }
            };

            Console.WriteLine("Getting personalized recommendations for user with 2 transactions:");
            results = recommendationsClient.Models.GetPersonalizedRecommendationsFromDefaultModel(events);
            PrintRecommendationResults(results);

            #endregion

            Console.WriteLine();
            Console.WriteLine("Press any key to close application.");
            Console.ReadLine();
        }

        /// <summary>
        /// Trains a new model using the sample catalog and usage files.
        /// </summary>
        /// <param name="recommendationsClient">The recommendations service client</param>
        /// <param name="storageAccountConnectionString">The connection string of the Azure storage account associated with the recommendation service</param>
        /// <returns>The id of the trained model</returns>
        static Guid TrainModelUsingSampleData(IRecommendationsAPI recommendationsClient, string storageAccountConnectionString)
        {
            string sampleCatalogFileName = "demoCatalog.csv"; // the name of the sample catalog file that ships with this sample
            string sampleUsageEventsFileName = "demoUsage.csv"; // the name of the sample usage events file that ships with this sample
            string blobContainerName = "sample-data"; // the name of the blob container we'll create to host our files
            string usageFolderName = "usageFiles"; // the name of the relative blob folder that will host the usage event file(s)

            Console.WriteLine("Uploading the sample files to the storage account...");
            var storageAccount = CloudStorageAccount.Parse(storageAccountConnectionString);
            CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

            Console.WriteLine($"\t Creating a blobs container named '{blobContainerName}'");
            CloudBlobContainer container = blobClient.GetContainerReference(blobContainerName);
            container.CreateIfNotExists();

            // get the path to the local sample folder
            string sampleDataLocalFolder =
                Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "Resources");

            Console.WriteLine($"\t Uploading the sample catalog file '{sampleCatalogFileName}'");
            CloudBlockBlob catalogBlob = container.GetBlockBlobReference(sampleCatalogFileName);
            catalogBlob.UploadFromFile(Path.Combine(sampleDataLocalFolder, sampleCatalogFileName));

            Console.WriteLine($"\t Uploading the sample usage events file ('{sampleUsageEventsFileName}') to a relative blob folder named '{usageFolderName}'");
            CloudBlockBlob usageEventsBlob = container.GetBlockBlobReference(Path.Combine(usageFolderName, sampleUsageEventsFileName));
            usageEventsBlob.UploadFromFile(Path.Combine(sampleDataLocalFolder, sampleUsageEventsFileName));

            // now that the catalog & usage event files were uploaded, we can trigger a new model training
            // Set the training parameters
            var modelParameters = new ModelParameters(
                description: "Sample created model",
                blobContainerName: blobContainerName,
                catalogFileRelativePath: sampleCatalogFileName, // the path to the uploaded catalog blob FILE 
                usageRelativePath: usageFolderName, // the path to the blob folder containing the usage file(s)
                evaluationUsageRelativePath: null, // we are not using evaluation usage events files in this model
                supportThreshold: 3,
                cooccurrenceUnit: CooccurrenceUnit.User,
                similarityFunction: SimilarityFunction.Jaccard,
                enableColdItemPlacement: true,
                enableColdToColdRecommendations: false,
                enableUserAffinity: true,
                allowSeedItemsInRecommendations: true,
                enableBackfilling: true,
                decayPeriodInDays: 30);

            Console.WriteLine("Starting a new model training...");
            Model model = recommendationsClient.Models.TrainNewModel(modelParameters);
            Guid modelId = model.Id.Value;
            Console.WriteLine($"Waiting for model {modelId} to complete training...");

            do
            {
                Thread.Sleep(TimeSpan.FromSeconds(5));
                model = recommendationsClient.Models.GetModel(modelId);
                Console.WriteLine($"\t Model '{modelId}' status: {model.ModelStatus} {model.ModelStatusMessage}");
            }
            while (model.ModelStatus != ModelStatus.Completed &&
                   model.ModelStatus != ModelStatus.Failed);

            Console.WriteLine($"Model '{modelId}' training completed with status: {model.ModelStatus}, {model.ModelStatusMessage}");
            Console.WriteLine();
            return modelId;
        }

        static void PrintRecommendationResults(IEnumerable<RecommendationResult> results)
        {
            foreach (var result in results)
            {
                Console.WriteLine($"\t Got recommended item id: {result.RecommendedItemId} with score: {result.Score:F5}");
            }
        }
    }
}
